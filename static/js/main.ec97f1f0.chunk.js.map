{"version":3,"sources":["components/MapView.js","components/Menu.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","MapView","props","state","currentLocation","lat","lng","zoom","userLocation","userLocationFound","getUserPosition","bind","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","longitude","console","log","this","Marker","Popup","Map","center","maxZoom","TileLayer","url","attribution","Component","Menu","username","useremail","userID","stitch_res","login","logout","addamodule","listmymodules","appId","client","Stitch","hasAppClient","getAppClient","initializeDefaultAppClient","mongodb","getServiceClient","RemoteMongoClient","factory","db","auth","isLoggedIn","authInfo","userProfile","data","name","email","userId","credential","GoogleRedirectCredential","loginWithRedirect","window","location","replace","collection","insertOne","temp_module_name","owner","catch","error","find","asArray","then","class","onClick","type","id","placeholder","onChange","event","target","value","map","info","idx","key","Login","hasRedirectResult","handleRedirectResult","user","style","margin","left","right","top","bottom","height","App","Home","className","basename","zIndex","marginBottom","to","exact","path","component","Create_Modules","View_Modules","Boolean","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ec97f1f0.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport { Map, Marker, Popup, TileLayer } from 'react-leaflet'\r\nimport 'leaflet/dist/leaflet.css'\r\nimport L from 'leaflet'\r\n\r\n\r\n\r\ndelete L.Icon.Default.prototype._getIconUrl;\r\n\r\nL.Icon.Default.mergeOptions({\r\n    iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\r\n    iconUrl: require('leaflet/dist/images/marker-icon.png'),\r\n    shadowUrl: require('leaflet/dist/images/marker-shadow.png')\r\n});\r\n\r\n\r\n\r\nclass MapView extends Component{\r\n  constructor(props){\r\n    super(props)\r\n\r\n    this.state ={\r\n      currentLocation: {lat: 45.51, lng:-122.68},\r\n      zoom: 13,\r\n      userLocation:[],\r\n      userLocationFound: false,\r\n    }\r\n  this.getUserPosition = this.getUserPosition.bind(this)\r\n  }\r\n  \r\n\r\n  getUserPosition(){\r\n    navigator.geolocation.getCurrentPosition(position => {\r\n      this.setState({ userLocation : [position.coords.latitude, position.coords.longitude], userLocationFound:true, currentLocation : [position.coords.latitude, position.coords.longitude]})\r\n      \r\n      console.log(this.state)\r\n      \r\n    })\r\n  \r\n  }\r\n\r\n  componentDidMount(){\r\n    this.getUserPosition()\r\n\r\n    \r\n  }\r\n\r\n  render(){\r\n    const userLocation = this.state.userLocationFound ? (\r\n      <Marker position={this.state.userLocation}>\r\n        <Popup >Your location</Popup>\r\n      </Marker>\r\n    ) : null\r\n\r\n    return (\r\n      <Map center={this.state.currentLocation} zoom={13} maxZoom={18} >\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\r\n        />\r\n        {userLocation}     \r\n      </Map>\r\n    );\r\n    }\r\n}\r\n\r\nexport default MapView;","import React, {Component} from 'react'\r\nimport {Stitch, RemoteMongoClient, GoogleRedirectCredential} from \"mongodb-stitch-browser-sdk\"\r\n\r\n\r\nexport default class Menu extends Component{\r\n  constructor(){\r\n      super()\r\n      this.state ={\r\n        username:\"\",\r\n        useremail:\"\",\r\n        userID:\"\",\r\n        stitch_res:[]\r\n      }\r\n\r\n      //bind functions\r\n      this.login = this.login.bind(this)\r\n      this.logout = this.logout.bind(this)\r\n      this.addamodule = this.addamodule.bind(this)\r\n      this.listmymodules = this.listmymodules.bind(this)\r\n  \r\n  }\r\n\r\n  componentDidMount(){\r\n\r\n        //init mongodb stitch\r\n        const appId = \"capstonear_app-xkqng\"\r\n        this.client = Stitch.hasAppClient(appId)\r\n        ? Stitch.getAppClient(appId)\r\n        : Stitch.initializeDefaultAppClient(appId)\r\n        const mongodb = this.client.getServiceClient(\r\n          RemoteMongoClient.factory,\r\n          \"mongodb-atlas\"\r\n        );\r\n        //select the db in our mongdb atlas cluster\r\n        this.db = mongodb.db(\"APP\"); \r\n        if (this.client.auth.isLoggedIn) {\r\n          this.setState(\r\n              {\r\n              username : this.client.auth.authInfo.userProfile.data.name,\r\n              useremail: this.client.auth.authInfo.userProfile.data.email,\r\n              userID: this.client.auth.authInfo.userId,\r\n              } \r\n          )\r\n          //window.location.replace('#/menu')\r\n        } \r\n   \r\n\r\n  }\r\n\r\n\r\n\r\n  //login button handler\r\n  async login(){\r\n    if (this.client.auth.isLoggedIn) {\r\n        this.setState(\r\n            {\r\n              username : this.client.auth.authInfo.userProfile.data.name,\r\n              useremail: this.client.auth.authInfo.userProfile.data.email,\r\n              userID: this.client.auth.authInfo.userId,\r\n            }\r\n           \r\n        )\r\n      } else {\r\n    \r\n        \r\n        //login using google redirect\r\n        const credential = new GoogleRedirectCredential();\r\n        this.client.auth.loginWithRedirect(credential);\r\n        console.log(this.state)\r\n        \r\n      }\r\n  }\r\n\r\n  async logout(){\r\n    await this.client.auth.logout()\r\n    this.setState({\r\n        username:\"\",\r\n        useremail:\"\",\r\n        userID:\"\"\r\n    })\r\n    window.location.replace(\"#/\")\r\n  }\r\n\r\n  addamodule(){\r\n    this.db.collection(\"MODULES\")\r\n    .insertOne({\r\n      userID: this.state.userID,\r\n      name: this.state.temp_module_name,\r\n      owner: this.state.useremail,\r\n    })\r\n    .catch(console.error);\r\n  }\r\n\r\n  listmymodules() {\r\n    if(!this.client.auth.isLoggedIn){\r\n        return\r\n    }\r\n    this.db.collection(\"MODULES\").find({})\r\n    .asArray()\r\n    .then((stitch_res) => {this.setState({stitch_res})\r\n      console.log(this.state.stitch_res[0])\r\n    }\r\n    )\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div>\r\n        <br />\r\n        <br />\r\n        <p>username:   {this.state.username} </p>\r\n        <p>email:   {this.state.useremail}</p>\r\n        <p>userid:   {this.state.userID}</p>\r\n        {/* <button onClick={this.login}> Login with Google</button> */}\r\n        <br />\r\n        <button class=\"btn btn-primary\"  onClick={this.logout}> Log out </button>\r\n        <br />\r\n        <br />\r\n        <input type=\"text\" id =\"createmodule\" placeholder=\"module name?\" \r\n        onChange={(event)=> this.setState({temp_module_name: event.target.value})}/>\r\n        <button class=\"btn btn-primary\"  onClick={this.addamodule}>Add a Module</button> \r\n        <br />\r\n        <button class=\"btn btn-primary\" onClick={this.listmymodules}>List my modules</button>\r\n        <ul>\r\n          {this.state.stitch_res.map((info,idx) => {\r\n            return <li key={idx}>{info.name}, created by {info.owner}</li>\r\n          })}\r\n        </ul>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}","import React, {Component} from 'react'\r\nimport './Login.css'\r\nimport {Stitch, RemoteMongoClient, GoogleRedirectCredential} from \"mongodb-stitch-browser-sdk\"\r\n\r\nexport default class Login extends Component{\r\n    constructor(){\r\n        super()\r\n        const appId = \"capstonear_app-xkqng\"\r\n        this.client = Stitch.getAppClient(appId)\r\n        this.login = this.login.bind(this)\r\n    }\r\n\r\n    componentDidMount(){\r\n      if (this.client.auth.hasRedirectResult()) {\r\n        console.log(\"has results\")\r\n  \r\n        this.client.auth.handleRedirectResult().then(user => {\r\n          this.setState(\r\n            {\r\n              username: this.client.auth.authInfo.userProfile.data.name,\r\n              useremail: this.client.auth.authInfo.userProfile.data.email,\r\n              userID: this.client.auth.authInfo.userId,\r\n  \r\n            }\r\n          )\r\n          window.location.replace('#/')\r\n        }\r\n        )\r\n      }\r\n        \r\n       \r\n    }\r\n\r\n\r\n    async login(){\r\n          \r\n          //login using google redirect\r\n          const credential = new GoogleRedirectCredential();\r\n          await this.client.auth.loginWithRedirect(credential);\r\n          console.log(this.state)\r\n          \r\n        \r\n    }\r\n\r\n\r\n  render() {\r\n    return (\r\n      \r\n          <div class=\"row justify-content-center\" style={{\r\n            position: \"fixed\",\r\n            margin: \"auto\",\r\n            left: 0,\r\n            right: 0,\r\n            top: 0,\r\n            bottom: 0,\r\n            height: \"50px\"\r\n          }}>\r\n              <button class=\"btn btn-primary\"onClick={this.login}>Login with Google</button>\r\n          </div>\r\n      \r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\r\n\r\nimport './App.css';\r\nimport MapView from './components/MapView.js'\r\nimport Menu from './components/Menu.js'\r\nimport { Stitch } from 'mongodb-stitch-browser-sdk'\r\nimport Login from './components/Login'\r\n\r\n\r\n\r\nimport {\r\n  Switch,\r\n  Route,\r\n  HashRouter,\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\n\r\nexport default class App extends Component {\r\n\r\n  constructor() {\r\n    super()\r\n    const appId = \"capstonear_app-xkqng\"\r\n    this.client = Stitch.hasAppClient(appId)\r\n      ? Stitch.getAppClient(appId)\r\n      : Stitch.initializeDefaultAppClient(appId)\r\n    if (this.client.auth.hasRedirectResult()) {\r\n      console.log(\"has results\")\r\n\r\n      this.client.auth.handleRedirectResult().then(user => {\r\n        this.setState(\r\n          {\r\n            username: this.client.auth.authInfo.userProfile.data.name,\r\n            useremail: this.client.auth.authInfo.userProfile.data.email,\r\n            userID: this.client.auth.authInfo.userId,\r\n\r\n          }\r\n        )\r\n        window.location.replace('#/')\r\n      }\r\n      )\r\n    }\r\n    else {\r\n\r\n      //window.location.replace('#/login')\r\n\r\n    }\r\n    this.state = {\r\n\r\n    }\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n\r\n\r\n  }\r\n\r\n  Home = () => {\r\n    if (this.client.auth.isLoggedIn) {\r\n      return (\r\n        <div className=\"App\">\r\n          <MapView />\r\n        </div>\r\n      );\r\n    }\r\n    else {\r\n      return (\r\n        <div className=\"Login\">\r\n          <Login />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  \r\n\r\n  render() {\r\n    return (\r\n      <HashRouter basename=\"/\">\r\n        <div className=\"\">\r\n          <nav className=\"bg-dark\" style={{ zIndex: 1500 }}>\r\n            <ul className=\"list-inline text-center\" style={{ marginBottom: 0 }}>\r\n              <li className=\"list-inline-item\">\r\n                <Link className=\"text-light\" to=\"/\">Home</Link>\r\n              </li>\r\n              {/* <li className=\"list-inline-item\">\r\n                <Link className=\"text-light\" to=\"/admin\">Admin</Link>\r\n              </li>\r\n              <li className=\"list-inline-item\">\r\n                <Link className=\"text-light\" to=\"/student\">Student</Link>\r\n              </li> */}\r\n              <li className=\"list-inline-item\">\r\n                <Link className=\"text-light\" to=\"/menu\">Menu</Link>\r\n              </li> \r\n            </ul>\r\n          </nav>\r\n\r\n          {/* A <Switch> looks through its children <Route>s and\r\n            renders the first one that matches the current URL. */}\r\n          <Switch>\r\n            <Route exact path=\"/\" component={this.Home} />\r\n            <Route exact path=\"/menu\" component={Menu} />\r\n            <Route exact path=\"/create_module\" component={Create_Modules} />\r\n            <Route exact path=\"/view_module\" component={View_Modules} />\r\n          </Switch>\r\n        </div>\r\n      </HashRouter>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nconst Create_Modules = () => {\r\n  return <h2>Admin</h2>;\r\n}\r\n\r\nconst View_Modules = () => {\r\n  return <h2>Student</h2>;\r\n}\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}