{"version":3,"sources":["../node_modules/require_optional sync","components/MapView.js","components/Menu.js","components/Login.js","components/DropPin.js","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","MapView","props","state","currentLocation","lat","lng","zoom","userLocation","userLocationFound","getUserPosition","bind","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","longitude","console","log","this","Marker","Popup","Map","center","maxZoom","TileLayer","url","attribution","Component","Menu","username","useremail","userID","stitch_res","login","logout","addamodule","listmymodules","appId","client","Stitch","hasAppClient","getAppClient","initializeDefaultAppClient","mongodb","getServiceClient","RemoteMongoClient","factory","db","auth","isLoggedIn","authInfo","userProfile","data","name","email","userId","credential","GoogleRedirectCredential","loginWithRedirect","window","location","replace","collection","insertOne","temp_module_name","owner","catch","error","find","_id","ObjectId","asArray","then","class","onClick","type","placeholder","onChange","event","target","value","map","info","idx","key","Login","hasRedirectResult","handleRedirectResult","user","style","margin","left","right","top","bottom","height","floatStyle","width","backgroundColor","color","borderRadius","textAlign","boxShadow","zIndex","DropPin","useState","setPosition","markers","setMarkers","timeoutFunction","setTimer","isPlacePin","setIsPlacePin","useEffect","pos","latlng","onmousedown","setTimeout","onmouseup","clearTimeout","fontSize","App","Home","className","basename","marginBottom","to","exact","path","component","Create_Modules","View_Modules","Boolean","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5ec3fcc4.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 132;","import React, {Component} from 'react'\nimport { Map, Marker, Popup, TileLayer } from 'react-leaflet'\nimport 'leaflet/dist/leaflet.css'\nimport L from 'leaflet'\n\n\n\ndelete L.Icon.Default.prototype._getIconUrl;\n\nL.Icon.Default.mergeOptions({\n    iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n    iconUrl: require('leaflet/dist/images/marker-icon.png'),\n    shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n});\n\n\n\nclass MapView extends Component{\n  constructor(props){\n    super(props)\n\n    this.state ={\n      currentLocation: {lat: 45.51, lng:-122.68},\n      zoom: 13,\n      userLocation:[],\n      userLocationFound: false,\n    }\n  this.getUserPosition = this.getUserPosition.bind(this)\n  }\n  \n\n  getUserPosition(){\n    navigator.geolocation.getCurrentPosition(position => {\n      this.setState({ userLocation : [position.coords.latitude, position.coords.longitude], userLocationFound:true, currentLocation : [position.coords.latitude, position.coords.longitude]})\n      \n      console.log(this.state)\n      \n    })\n  \n  }\n\n  componentDidMount(){\n    this.getUserPosition()\n\n    \n  }\n\n  render(){\n    const userLocation = this.state.userLocationFound ? (\n      <Marker position={this.state.userLocation}>\n        <Popup >Your location</Popup>\n      </Marker>\n    ) : null\n\n    return (\n      <Map center={this.state.currentLocation} zoom={13} maxZoom={18} >\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\n        />\n        {userLocation}     \n      </Map>\n    );\n    }\n}\n\nexport default MapView;","import React, {Component} from 'react'\nimport {Stitch, RemoteMongoClient, GoogleRedirectCredential} from \"mongodb-stitch-browser-sdk\"\nimport { ObjectId } from 'mongodb'\n\nexport default class Menu extends Component{\n  constructor(){\n      super()\n      this.state ={\n        username:\"\",\n        useremail:\"\",\n        userID:\"\",\n        stitch_res:[]\n      }\n\n      //bind functions\n      this.login = this.login.bind(this)\n      this.logout = this.logout.bind(this)\n      this.addamodule = this.addamodule.bind(this)\n      this.listmymodules = this.listmymodules.bind(this)\n  \n  }\n\n  componentDidMount(){\n\n        //init mongodb stitch\n        const appId = \"capstonear_app-xkqng\"\n        this.client = Stitch.hasAppClient(appId)\n        ? Stitch.getAppClient(appId)\n        : Stitch.initializeDefaultAppClient(appId)\n        const mongodb = this.client.getServiceClient(\n          RemoteMongoClient.factory,\n          \"mongodb-atlas\"\n        );\n        //select the db in our mongdb atlas cluster\n        this.db = mongodb.db(\"APP\"); \n        if (this.client.auth.isLoggedIn) {\n          this.setState(\n              {\n              username : this.client.auth.authInfo.userProfile.data.name,\n              useremail: this.client.auth.authInfo.userProfile.data.email,\n              userID: this.client.auth.authInfo.userId,\n              } \n          )\n          //window.location.replace('#/menu')\n        } \n   \n\n  }\n\n\n\n  //login button handler\n  async login(){\n    if (this.client.auth.isLoggedIn) {\n        this.setState(\n            {\n              username : this.client.auth.authInfo.userProfile.data.name,\n              useremail: this.client.auth.authInfo.userProfile.data.email,\n              userID: this.client.auth.authInfo.userId,\n            }\n           \n        )\n      } else {\n    \n        \n        //login using google redirect\n        const credential = new GoogleRedirectCredential();\n        this.client.auth.loginWithRedirect(credential);\n        console.log(this.state)\n        \n      }\n  }\n\n  async logout(){\n    await this.client.auth.logout()\n    this.setState({\n        username:\"\",\n        useremail:\"\",\n        userID:\"\"\n    })\n    window.location.replace(\"#/\")\n  }\n\n  addamodule(){\n    this.db.collection(\"MODULES\")\n    .insertOne({\n      userID: this.state.userID,\n      name: this.state.temp_module_name,\n      owner: this.state.useremail,\n    })\n    .catch(console.error);\n  }\n\n  listmymodules() {\n    if(!this.client.auth.isLoggedIn){\n        return\n    }\n    this.db.collection(\"PINS\").find({_id: ObjectId(\"5ebed1bc5992681f357d7948\")})\n    .asArray()\n    .then((stitch_res) => {this.setState({stitch_res})\n      console.log(this.state.stitch_res[0])\n    }\n    )\n  }\n\n  render(){\n    return(\n      <div>\n        <br />\n        <br />\n        <p>username:   {this.state.username} </p>\n        <p>email:   {this.state.useremail}</p>\n        <p>userid:   {this.state.userID}</p>\n        {/* <button onClick={this.login}> Login with Google</button> */}\n        <br />\n        <button class=\"btn btn-primary\"  onClick={this.logout}> Log out </button>\n        <br />\n        <br />\n        <input type=\"text\" id =\"createmodule\" placeholder=\"module name?\" \n        onChange={(event)=> this.setState({temp_module_name: event.target.value})}/>\n        <button class=\"btn btn-primary\"  onClick={this.addamodule}>Add a Module</button> \n        <br />\n        <button class=\"btn btn-primary\" onClick={this.listmymodules}>List my modules</button>\n        <ul>\n          {this.state.stitch_res.map((info,idx) => {\n            return <li key={idx}>{info.name}, created by {info.owner}</li>\n          })}\n        </ul>\n\n      </div>\n    )\n  }\n}","import React, {Component} from 'react'\nimport './Login.css'\nimport {Stitch, RemoteMongoClient, GoogleRedirectCredential} from \"mongodb-stitch-browser-sdk\"\n\nexport default class Login extends Component{\n    constructor(){\n        super()\n        const appId = \"capstonear_app-xkqng\"\n        this.client = Stitch.getAppClient(appId)\n        this.login = this.login.bind(this)\n    }\n\n    componentDidMount(){\n      if (this.client.auth.hasRedirectResult()) {\n        console.log(\"has results\")\n  \n        this.client.auth.handleRedirectResult().then(user => {\n          this.setState(\n            {\n              username: this.client.auth.authInfo.userProfile.data.name,\n              useremail: this.client.auth.authInfo.userProfile.data.email,\n              userID: this.client.auth.authInfo.userId,\n  \n            }\n          )\n          window.location.replace('#/')\n        }\n        )\n      }\n        \n       \n    }\n\n\n    async login(){\n          \n          //login using google redirect\n          const credential = new GoogleRedirectCredential();\n          await this.client.auth.loginWithRedirect(credential);\n          console.log(this.state)\n          \n        \n    }\n\n\n  render() {\n    return (\n      \n          <div class=\"row justify-content-center\" style={{\n            position: \"fixed\",\n            margin: \"auto\",\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0,\n            height: \"50px\"\n          }}>\n              <button class=\"btn btn-primary\"onClick={this.login}>Login with Google</button>\n          </div>\n      \n    )\n  }\n}","import React, { useState, useEffect } from 'react'\r\nimport { Map, Marker, Popup, TileLayer } from 'react-leaflet'\r\nimport 'leaflet/dist/leaflet.css'\r\n\r\nconst floatStyle = {\r\n    position: \"fixed\",\r\n    width: \"60px\",\r\n    height: \"60px\",\r\n    bottom: \"40px\",\r\n    right: \"40px\",\r\n    backgroundColor: \"#0C9\",\r\n    color: \"#FFF\",\r\n    borderRadius: \"50px\",\r\n    textAlign: \"center\",\r\n    boxShadow: \"2px 2px 3px #999\",\r\n    zIndex: 1500\r\n}\r\n\r\nconst DropPin = () => {\r\n    const [position, setPosition] = useState([45, 45]);\r\n    const [markers, setMarkers] = useState([]);\r\n    const [timeoutFunction, setTimer] = useState(null);\r\n    const [isPlacePin, setIsPlacePin] = useState(false);\r\n    useEffect(() => {\r\n        navigator.geolocation.getCurrentPosition(pos => {\r\n            const { latitude, longitude } = pos.coords;\r\n            setPosition([latitude, longitude]);\r\n        })\r\n    }, []);\r\n    return (\r\n        <Map center={position} zoom={13}\r\n            onClick={e => {\r\n                if (isPlacePin) {\r\n                    setMarkers(\r\n                        [...markers,\r\n                        <Marker position={[e.latlng.lat, e.latlng.lng]}>\r\n                            <Popup>testing</Popup>\r\n                        </Marker>\r\n                        ]\r\n                    );\r\n                    setIsPlacePin(!isPlacePin);\r\n                }\r\n            }}\r\n            onmousedown={e => {\r\n                setTimer(setTimeout(() => {\r\n                }, 300));\r\n            }}\r\n            onmouseup={() => clearTimeout(timeoutFunction)}\r\n        >\r\n            <button style={floatStyle} onClick={()=>setIsPlacePin(!isPlacePin)}>\r\n                <div style={{fontSize: \"40px\"}}>+</div>\r\n            </button>\r\n            <TileLayer\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\r\n            />\r\n            <Marker position={position}>\r\n                <Popup>hello</Popup>\r\n            </Marker>\r\n            {markers}\r\n        </Map>\r\n    );\r\n}\r\n\r\nexport default DropPin;\r\n","import React, { Component } from 'react';\n\nimport './App.css';\nimport MapView from './components/MapView.js'\nimport Menu from './components/Menu.js'\nimport { Stitch , ObjectID} from 'mongodb-stitch-browser-sdk'\nimport Login from './components/Login'\nimport DropPin from './components/DropPin';\n\n\n\nimport {\n  Switch,\n  Route,\n  HashRouter,\n  Link\n} from \"react-router-dom\";\n\n\nexport default class App extends Component {\n\n  constructor() {\n    super()\n    const appId = \"capstonear_app-xkqng\"\n    this.client = Stitch.hasAppClient(appId)\n      ? Stitch.getAppClient(appId)\n      : Stitch.initializeDefaultAppClient(appId)\n    if (this.client.auth.hasRedirectResult()) {\n      console.log(\"has results\")\n\n      this.client.auth.handleRedirectResult().then(user => {\n        this.setState(\n          {\n            username: this.client.auth.authInfo.userProfile.data.name,\n            useremail: this.client.auth.authInfo.userProfile.data.email,\n            userID: this.client.auth.authInfo.userId,\n\n          }\n        )\n        window.location.replace('#/')\n      }\n      )\n    }\n    else {\n\n      //window.location.replace('#/login')\n\n    }\n    this.state = {\n\n    }\n\n  }\n\n  componentDidMount() {\n\n\n\n  }\n\n  Home = () => {\n    if (this.client.auth.isLoggedIn) {\n      return (\n        <div className=\"App\">\n          <MapView />\n        </div>\n      );\n    }\n    else {\n      return (\n        <div className=\"Login\">\n          <Login />\n        </div>\n      );\n    }\n  }\n\n  \n\n  render() {\n    return (\n      <HashRouter basename=\"/\">\n        <div className=\"\">\n          <nav className=\"bg-dark\" style={{ zIndex: 1500 }}>\n            <ul className=\"list-inline text-center\" style={{ marginBottom: 0 }}>\n              <li className=\"list-inline-item\">\n                <Link className=\"text-light\" to=\"/\">Home</Link>\n              </li>\n              {/* <li className=\"list-inline-item\">\n                <Link className=\"text-light\" to=\"/admin\">Admin</Link>\n              </li>\n              <li className=\"list-inline-item\">\n                <Link className=\"text-light\" to=\"/student\">Student</Link>\n              </li> */}\n              <li className=\"list-inline-item\">\n                <Link className=\"text-light\" to=\"/menu\">Menu</Link>\n              </li> \n              <li className=\"list-inline-item\">\n                <Link className=\"text-light\" to=\"/droppin\">Drop Pin</Link>\n              </li> \n            </ul>\n          </nav>\n\n          {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n          <Switch>\n            <Route exact path=\"/\" component={this.Home} />\n            <Route exact path=\"/menu\" component={Menu} />\n            <Route exact path=\"/droppin\">\n              <DropPin />\n            </Route>\n            <Route exact path=\"/create_module\" component={Create_Modules} />\n            <Route exact path=\"/view_module\" component={View_Modules} />\n          </Switch>\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\n\n\nconst Create_Modules = () => {\n  return <h2>Admin</h2>;\n}\n\nconst View_Modules = () => {\n  return <h2>Student</h2>;\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}