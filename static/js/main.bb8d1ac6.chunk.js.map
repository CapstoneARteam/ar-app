{"version":3,"sources":["components/MapView.js","components/Menu.js","App.js","serviceWorker.js","index.js"],"names":["L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","MapView","props","state","currentLocation","lat","lng","zoom","userLocation","userLocationFound","getUserPosition","bind","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","longitude","console","log","this","Marker","Popup","Map","center","maxZoom","TileLayer","url","attribution","Component","Menu","username","useremail","userID","stitch_res","login","logout","addamodule","listmymodules","appId","client","Stitch","hasAppClient","getAppClient","initializeDefaultAppClient","mongodb","getServiceClient","RemoteMongoClient","factory","db","auth","hasRedirectResult","handleRedirectResult","then","user","authInfo","userProfile","data","name","email","userId","window","location","replace","isLoggedIn","currentUser","credential","GoogleRedirectCredential","loginWithRedirect","collection","insertOne","temp_module_name","owner","catch","error","find","asArray","onClick","type","id","placeholder","onChange","event","target","value","map","info","idx","key","Home","className","Admin","Student","App","basename","style","zIndex","marginBottom","to","path","Boolean","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.bb8d1ac6.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport { Map, Marker, Popup, TileLayer } from 'react-leaflet'\nimport 'leaflet/dist/leaflet.css'\nimport L from 'leaflet'\n\ndelete L.Icon.Default.prototype._getIconUrl;\n\nL.Icon.Default.mergeOptions({\n    iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n    iconUrl: require('leaflet/dist/images/marker-icon.png'),\n    shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n});\n\n\n\nclass MapView extends Component{\n  constructor(props){\n    super(props)\n\n    this.state ={\n      currentLocation: {lat: 45.51, lng:-122.68},\n      zoom: 13,\n      userLocation:[],\n      userLocationFound: false,\n    }\n  this.getUserPosition = this.getUserPosition.bind(this)\n  }\n  \n\n  getUserPosition(){\n    navigator.geolocation.getCurrentPosition(position => {\n      this.setState({ userLocation : [position.coords.latitude, position.coords.longitude], userLocationFound:true, currentLocation : [position.coords.latitude, position.coords.longitude]})\n      \n      console.log(this.state)\n      \n    })\n  \n  }\n\n  componentDidMount(){\n    this.getUserPosition()\n  }\n\n  render(){\n    const userLocation = this.state.userLocationFound ? (\n      <Marker position={this.state.userLocation}>\n        <Popup>Your location</Popup>\n      </Marker>\n    ) : null\n\n    return (\n      <Map center={this.state.currentLocation} zoom={13} maxZoom={18} >\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\n        />\n        {userLocation}     \n      </Map>\n    );\n    }\n}\n\nexport default MapView;","import React, {Component} from 'react'\nimport {Stitch, RemoteMongoClient, GoogleRedirectCredential} from \"mongodb-stitch-browser-sdk\"\n\nexport default class Menu extends Component{\n  constructor(){\n      super()\n      this.state ={\n        username:\"\",\n        useremail:\"\",\n        userID:\"\",\n        stitch_res:[]\n      }\n\n      //bind functions\n      this.login = this.login.bind(this)\n      this.logout = this.logout.bind(this)\n      this.addamodule = this.addamodule.bind(this)\n      this.listmymodules = this.listmymodules.bind(this)\n  \n  }\n\n  componentDidMount(){\n    //init mongodb stitch\n    const appId = \"capstonear_app-xkqng\"\n    this.client = Stitch.hasAppClient(appId)\n    ? Stitch.getAppClient(appId)\n    : Stitch.initializeDefaultAppClient(appId)\n    const mongodb = this.client.getServiceClient(\n      RemoteMongoClient.factory,\n      \"mongodb-atlas\"\n    );\n    //select the db in our mongdb atlas cluster\n    this.db = mongodb.db(\"APP\"); \n    if (this.client.auth.hasRedirectResult()) {\n        this.client.auth.handleRedirectResult().then(user =>{\n            this.setState(\n                {\n                  username : this.client.auth.authInfo.userProfile.data.name,\n                  useremail: this.client.auth.authInfo.userProfile.data.email,\n                  userID: this.client.auth.authInfo.userId,\n                }\n               \n            )\n         \n            \n        }\n            \n        );\n        \n    }\n    window.location.replace(\"#/menu\");\n\n\n  }\n\n\n\n  //login button handler\n  async login(){\n  \n\n    if (this.client.auth.isLoggedIn) {\n        const currentUser = this.client.auth.user;\n        this.setState({ currentUser });\n        \n        this.setState(\n            {\n              username : this.client.auth.authInfo.userProfile.data.name,\n              useremail: this.client.auth.authInfo.userProfile.data.email,\n              userID: this.client.auth.authInfo.userId,\n            }\n           \n        )\n        \n        \n      } else {\n        //login using google redirect\n        const credential = new GoogleRedirectCredential();\n        this.client.auth.loginWithRedirect(credential);\n        console.log(this.state)\n\n      }\n\n  }\n\n  async logout(){\n    await this.client.auth.logout()\n    this.setState({\n        username:\"\",\n        useremail:\"\",\n        userID:\"\"\n    })\n  }\n\n  addamodule(){\n    this.db.collection(\"MODULES\")\n    .insertOne({\n      userID: this.state.userID,\n      name: this.state.temp_module_name,\n      owner: this.state.useremail,\n    })\n    .catch(console.error);\n  }\n\n  listmymodules() {\n    if(!this.client.auth.isLoggedIn){\n        return\n    }\n    this.db.collection(\"MODULES\").find({})\n    .asArray()\n    .then((stitch_res) => {this.setState({stitch_res})\n      console.log(this.state.stitch_res[0])\n    }\n    )\n  }\n\n  render(){\n    return(\n      <div>\n        <br />\n        <br />\n        <p>username:   {this.state.username} </p>\n        <p>email:   {this.state.useremail}</p>\n        <p>userid:   {this.state.userID}</p>\n        <button onClick={this.login}> Login with Google</button>\n        <br />\n        <button onClick={this.logout}> Log out </button>\n        <br />\n        <br />\n        <input type=\"text\" id =\"createmodule\" placeholder=\"module name?\" \n        onChange={(event)=> this.setState({temp_module_name: event.target.value})}/>\n        <button onClick={this.addamodule}>Add a Module</button> \n        <br />\n        <button onClick={this.listmymodules}>List my modules</button>\n        <ul>\n          {this.state.stitch_res.map((info,idx) => {\n            return <li key={idx}>{info.name}, created by {info.owner}</li>\n          })}\n        </ul>\n\n      </div>\n    )\n  }\n}","import React from 'react';\nimport './App.css';\nimport MapView from './components/MapView.js'\nimport Menu from './components/Menu.js'\n\nimport {\n  Switch,\n  Route,\n  HashRouter,\n  Link\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <HashRouter basename=\"/\">\n      <div className=\"\">\n        <nav className=\"bg-dark\" style={{ zIndex: 1500 }}>\n          <ul className=\"list-inline text-center\" style={{ marginBottom: 0 }}>\n            <li className=\"list-inline-item\">\n              <Link className=\"text-light\" to=\"/\">Home</Link>\n            </li>\n            <li className=\"list-inline-item\">\n              <Link className=\"text-light\" to=\"/admin\">Admin</Link>\n            </li>\n            <li className=\"list-inline-item\">\n              <Link className=\"text-light\" to=\"/student\">Student</Link>\n            </li>\n            <li className=\"list-inline-item\">\n              <Link className=\"text-light\" to=\"/menu\">Menu</Link>\n            </li>\n          </ul>\n        </nav>\n\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          \n          <Route path=\"/menu\">\n            <Menu />\n          </Route>\n\n          <Route path=\"/admin\">\n            <Admin />\n          </Route>\n          <Route path=\"/student\">\n            <Student />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </HashRouter>\n  );\n}\n\nconst Home = () => {\n  return (\n    <div className=\"App\">\n      <MapView />\n    </div>\n  );\n}\n\nconst Admin = () => {\n  return <h2>Admin</h2>;\n}\n\nconst Student = () => {\n  return <h2>Student</h2>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}