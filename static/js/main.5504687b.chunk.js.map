{"version":3,"sources":["components/MapView.js","App.js","serviceWorker.js","index.js"],"names":["L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","MapView","props","handleLocationFound","e","setState","userLocationFound","userLocation","latlng","handleClick","map","mapRef","current","leafletElement","locate","state","currentLocation","lat","lng","zoom","getUserPosition","bind","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","console","log","this","Marker","Popup","Map","center","maxZoom","TileLayer","url","attribution","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oVAKOA,IAAEC,KAAKC,QAAQC,UAAUC,YAEhCJ,IAAEC,KAAKC,QAAQG,aAAa,CACxBC,cAAeC,EAAQ,IACvBC,QAASD,EAAQ,IACjBE,UAAWF,EAAQ,M,IAmERG,E,kDA7Db,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IA0BRC,oBAAsB,SAACC,GACrB,EAAKC,SAAS,CACZC,mBAAmB,EACnBC,aAAcH,EAAEI,UA9BF,EAkClBC,YAAc,WACZ,IAAMC,EAAM,EAAKC,OAAOC,QACb,MAAPF,GACFA,EAAIG,eAAeC,UAlCrB,EAAKC,MAAO,CACVC,gBAAiB,CAACC,IAAK,MAAOC,KAAK,QACnCC,KAAM,GACNZ,aAAa,GACbD,mBAAmB,GAEvB,EAAKc,gBAAkB,EAAKA,gBAAgBC,KAArB,gBATL,E,8DAaA,IAAD,OACfC,UAAUC,YAAYC,oBAAmB,SAAAC,GACvC,EAAKpB,SAAS,CAAEE,aAAe,CAACkB,EAASC,OAAOC,SAAUF,EAASC,OAAOE,WAAYtB,mBAAkB,EAAMU,gBAAkB,CAACS,EAASC,OAAOC,SAAUF,EAASC,OAAOE,aAE3KC,QAAQC,IAAI,EAAKf,Y,0CAOnBgB,KAAKX,oB,+BAmBL,IAAMb,EAAewB,KAAKhB,MAAMT,kBAC9B,kBAAC0B,EAAA,EAAD,CAAQP,SAAUM,KAAKhB,MAAMR,cAC3B,kBAAC0B,EAAA,EAAD,uBAEA,KAEJ,OACE,kBAACC,EAAA,EAAD,CAAKC,OAAQJ,KAAKhB,MAAMC,gBAAiBG,KAAM,GAAIiB,QAAS,IAC1D,kBAACC,EAAA,EAAD,CACEC,IAAI,qDACJC,YAAY,2EAEbhC,O,GAxDaiC,aCHPC,MARf,WACE,OACE,yBAAKC,UAAU,OACd,kBAAC,EAAD,QCKeC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmB7B,WACrBA,UAAU8B,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.5504687b.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport { Map, Marker, Popup, TileLayer } from 'react-leaflet'\nimport 'leaflet/dist/leaflet.css'\nimport L from 'leaflet'\n\ndelete L.Icon.Default.prototype._getIconUrl;\n\nL.Icon.Default.mergeOptions({\n    iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n    iconUrl: require('leaflet/dist/images/marker-icon.png'),\n    shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n});\n\n\n\nclass MapView extends Component{\n  constructor(props){\n    super(props)\n\n    this.state ={\n      currentLocation: {lat: 45.51, lng:-122.68},\n      zoom: 13,\n      userLocation:[],\n      userLocationFound: false,\n    }\n  this.getUserPosition = this.getUserPosition.bind(this)\n  }\n  \n\n  getUserPosition(){\n    navigator.geolocation.getCurrentPosition(position => {\n      this.setState({ userLocation : [position.coords.latitude, position.coords.longitude], userLocationFound:true, currentLocation : [position.coords.latitude, position.coords.longitude]})\n      \n      console.log(this.state)\n      \n    })\n  \n  }\n\n  componentDidMount(){\n    this.getUserPosition()\n  }\n\n  handleLocationFound = (e) => {\n    this.setState({\n      userLocationFound: true,\n      userLocation: e.latlng,\n    })\n  }\n\n  handleClick = () => {\n    const map = this.mapRef.current\n    if (map != null) {\n      map.leafletElement.locate()\n    }\n  }\n\n\n  render(){\n    const userLocation = this.state.userLocationFound ? (\n      <Marker position={this.state.userLocation}>\n        <Popup>Your location</Popup>\n      </Marker>\n    ) : null\n\n    return (\n      <Map center={this.state.currentLocation} zoom={13} maxZoom={18} >\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\n        />\n        {userLocation}     \n      </Map>\n    );\n    }\n}\n\nexport default MapView;","import React from 'react';\nimport './App.css';\nimport MapView from './components/MapView.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <MapView/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}